CCS PCH C Compiler, Version 4.120, 28462               07-oct.-15 20:02

               Filename: domodin.lst

               ROM used: 2356 bytes (2%)
                         Largest free fragment is 65528
               RAM used: 210 (6%) at main() level
                         230 (6%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
00400:  GOTO   0B8A
*
00408:  MOVWF  04
0040A:  MOVFF  FD8,05
0040E:  MOVFF  FE0,06
00412:  MOVLB  0
00414:  MOVFF  FE9,0C
00418:  MOVFF  FEA,07
0041C:  MOVFF  FE1,08
00420:  MOVFF  FE2,09
00424:  MOVFF  FD9,0A
00428:  MOVFF  FDA,0B
0042C:  MOVFF  FF3,12
00430:  MOVFF  FF4,13
00434:  MOVFF  FFA,14
00438:  MOVFF  FF5,15
0043C:  MOVFF  FF6,16
00440:  MOVFF  FF7,17
00444:  MOVFF  FF8,18
00448:  MOVFF  FFB,19
0044C:  MOVFF  00,0E
00450:  MOVFF  01,0F
00454:  MOVFF  02,10
00458:  MOVFF  03,11
0045C:  BTFSS  F9D.5
0045E:  GOTO   0468
00462:  BTFSC  F9E.5
00464:  GOTO   04EE
00468:  BTFSS  F9D.3
0046A:  GOTO   0474
0046E:  BTFSC  F9E.3
00470:  GOTO   0584
00474:  MOVFF  0E,00
00478:  MOVFF  0F,01
0047C:  MOVFF  10,02
00480:  MOVFF  11,03
00484:  MOVFF  0C,FE9
00488:  MOVFF  07,FEA
0048C:  BSF    07.7
0048E:  MOVFF  08,FE1
00492:  MOVFF  09,FE2
00496:  MOVFF  0A,FD9
0049A:  MOVFF  0B,FDA
0049E:  MOVFF  12,FF3
004A2:  MOVFF  13,FF4
004A6:  MOVFF  14,FFA
004AA:  MOVFF  15,FF5
004AE:  MOVFF  16,FF6
004B2:  MOVFF  17,FF7
004B6:  MOVFF  18,FF8
004BA:  MOVFF  19,FFB
004BE:  MOVF   04,W
004C0:  MOVFF  06,FE0
004C4:  MOVFF  05,FD8
004C8:  RETFIE 0
....................  
.................... #include <18f47j53.h> 
.................... //////// Standard Header file for the PIC18F47J53 device //////////////// 
.................... #device PIC18F47J53 
.................... #list 
....................  
.................... #include "hardware.h" 
.................... #ifndef HARDWARE_H 
.................... #define	HARDWARE_H 
....................  
.................... #define LED1 	PIN_B2 
.................... #define LED2 	PIN_B3 
....................  
.................... #define FP1A    PIN_C2 
.................... #define FP1B    PIN_D0 
.................... #define FP2A    PIN_C1 
.................... #define FP2B    PIN_C0 
.................... #define FP3A    PIN_A6 
.................... #define FP3B    PIN_A7 
.................... #define FP4A    PIN_E2 
.................... #define FP4B    PIN_E1 
.................... #define FP5A    PIN_E0 
.................... #define FP5B    PIN_A5 
.................... #define FP6A    PIN_A2 
.................... #define FP6B    PIN_A1 
....................  
.................... #define RELAIS1_ON  PIN_D6 
.................... #define RELAIS1_OFF PIN_D7 
.................... #define RELAIS2_ON  PIN_D4 
.................... #define RELAIS2_OFF PIN_D5 
....................  
.................... #define DELAIS_RELAIS_MS 30 
....................  
.................... #define ONE_WIRE        PIN_A0 
.................... #define ZCD             PIN_D1 
.................... #define CONTACT_IO      PIN_D3 
.................... #define SERIAL_FROM_RPI PIN_D2 
....................  
.................... #define ADC_RELAIS_1     
.................... #define ADC_RELAIS_2     
....................  
.................... #endif	/* HARDWARE_H */ 
....................  
....................  
.................... #include "outputs.h" 
.................... #ifndef OUTPUTS_H 
.................... #define	OUTPUTS_H 
....................  
.................... #ifndef bool 
.................... #define bool int1 
.................... #endif 
....................  
.................... enum t_Order{ 
....................     ARRET = 0, HORS_GEL = 1, ECO = 2, CONFORT = 3  
.................... }; 
....................  
.................... typedef struct { 
....................     t_Order CurrentOrder; 
....................     unsigned long Positive; 
....................     unsigned long Negative; 
.................... }t_Radiator; 
....................  
.................... void Init_outputs(); 
.................... void Radiator(t_Order Order, int8 id); 
.................... void Detection_delestage(); 
.................... void Update_outputs(); 
.................... void Update_Relais(bool bRelai_1, bool bRelai_2); 
....................  
.................... #endif	/* OUTPUTS_H */ 
....................  
....................  
.................... #include "main.h" 
.................... #ifndef MAIN_H 
.................... #define MAIN_H 
.................... // Here shall lie only the declaration of functions and defines 
.................... #ifndef bool 
.................... #define bool int1 
.................... #define false 0 
.................... #define true 1 
.................... #endif 
....................  
.................... #define SIZE_TELEINFO   64 
.................... #define END_OF_LABEL    0x0D 
....................  
.................... #use delay(clock=48M) 
*
00904:  CLRF   FEA
00906:  MOVLW  DB
00908:  MOVWF  FE9
0090A:  MOVF   FEF,W
0090C:  BZ    092A
0090E:  MOVLW  0F
00910:  MOVWF  01
00912:  CLRF   00
00914:  DECFSZ 00,F
00916:  BRA    0914
00918:  DECFSZ 01,F
0091A:  BRA    0912
0091C:  MOVLW  8F
0091E:  MOVWF  00
00920:  DECFSZ 00,F
00922:  BRA    0920
00924:  NOP   
00926:  DECFSZ FEF,F
00928:  BRA    090E
0092A:  RETURN 0
.................... /* RS232 configuration */ 
.................... #use rs232(baud=1200,bits=7,xmit=PIN_C6,rcv=PIN_C7, PARITY=E, STOP=1) 
*
004CA:  MOVLW  07
004CC:  MOVWF  01
004CE:  CLRF   xE4
004D0:  MOVFF  E3,00
004D4:  MOVF   00,W
004D6:  XORWF  xE4,F
004D8:  RRCF   00,F
004DA:  DECFSZ 01,F
004DC:  BRA    04D4
004DE:  BTFSS  F9E.4
004E0:  BRA    04DE
004E2:  BTFSC  xE4.0
004E4:  BSF    xE3.7
004E6:  MOVFF  E3,FAE
004EA:  GOTO   051C (RETURN)
.................... #use i2c(SLAVE, SCL=PIN_B4, SDA=PIN_B5, address=0xA0) 
*
0056E:  MOVF   FC9,W
00570:  MOVFF  E5,FC9
00574:  BSF    FC6.4
00576:  BCF    F9E.3
00578:  BTFSC  FC7.0
0057A:  BRA    0578
0057C:  CLRF   01
0057E:  BTFSC  FC6.4
00580:  INCF   01,F
00582:  RETURN 0
.................... #fuses WDT512, INTRC_PLL_IO, PLL2, PLLEN, NOCPUDIV 
....................  
.................... #build (reset=0x400, interrupt=0x408) 
.................... #org 0, 0x3FF {} 
....................  
.................... void Init_hard(); 
....................  
.................... #endif 
....................  
....................  
.................... extern bool Delestage_enable; 
....................  
.................... bool flagValidFrame = false; 
.................... char FrameTeleinfo[SIZE_TELEINFO] = {0}; 
.................... char FrameTeleinfoStored[SIZE_TELEINFO] = {0}; 
.................... char FrameIndex = 0; 
.................... char FrameIndexStored = 0; 
....................  
.................... BYTE I2C_table_index, Registers_table[16] = {0}; 
....................  
.................... void main() 
.................... { 
*
00B8A:  CLRF   FF8
00B8C:  BCF    FD0.7
00B8E:  BSF    07.7
00B90:  CLRF   FEA
00B92:  CLRF   FE9
00B94:  BSF    F7E.3
00B96:  MOVLW  0F
00B98:  MOVWF  FB0
00B9A:  MOVLW  27
00B9C:  MOVWF  F7F
00B9E:  MOVLW  A6
00BA0:  MOVWF  FAD
00BA2:  MOVLW  90
00BA4:  MOVWF  FAC
00BA6:  BSF    F93.4
00BA8:  BSF    F93.5
00BAA:  MOVLW  A0
00BAC:  MOVWF  FC8
00BAE:  MOVLW  36
00BB0:  MOVWF  FC6
00BB2:  BSF    FC5.0
00BB4:  BCF    1B.0
00BB6:  CLRF   x9C
00BB8:  CLRF   x9D
00BBA:  MOVLW  03
00BBC:  MOVWF  xAF
00BBE:  BSF    F7E.3
00BC0:  MOVLW  0F
00BC2:  MOVWF  FB0
00BC4:  MOVLW  27
00BC6:  MOVWF  F7F
00BC8:  MOVLW  A6
00BCA:  MOVWF  FAD
00BCC:  MOVLW  90
00BCE:  MOVWF  FAC
00BD0:  BSF    1B.1
00BD2:  CLRF   xB1
00BD4:  CLRF   xB0
00BD6:  CLRF   xB3
00BD8:  CLRF   xB2
00BDA:  BSF    1B.2
00BDC:  BSF    1B.3
00BDE:  MOVLB  1
00BE0:  CLRF   x88
00BE2:  MOVLW  FF
00BE4:  MOVLB  F
00BE6:  MOVWF  x48
00BE8:  BCF    FC2.6
00BEA:  BCF    FC2.7
00BEC:  MOVF   x49,W
00BEE:  ANDLW  E0
00BF0:  IORLW  1F
00BF2:  MOVWF  x49
00BF4:  CLRF   x25
00BF6:  CLRF   FD1
00BF8:  CLRF   FD2
00BFA:  CLRF   1C
00BFC:  CLRF   1D
00BFE:  CLRF   1E
00C00:  CLRF   1F
00C02:  CLRF   20
00C04:  CLRF   21
00C06:  CLRF   22
00C08:  CLRF   23
00C0A:  CLRF   24
00C0C:  CLRF   25
00C0E:  CLRF   26
00C10:  CLRF   27
00C12:  CLRF   28
00C14:  CLRF   29
00C16:  CLRF   2A
00C18:  CLRF   2B
00C1A:  CLRF   2C
00C1C:  CLRF   2D
00C1E:  CLRF   2E
00C20:  CLRF   2F
00C22:  CLRF   30
00C24:  CLRF   31
00C26:  CLRF   32
00C28:  CLRF   33
00C2A:  CLRF   34
00C2C:  CLRF   35
00C2E:  CLRF   36
00C30:  CLRF   37
00C32:  CLRF   38
00C34:  CLRF   39
00C36:  CLRF   3A
00C38:  CLRF   3B
00C3A:  CLRF   3C
00C3C:  CLRF   3D
00C3E:  CLRF   3E
00C40:  CLRF   3F
00C42:  CLRF   40
00C44:  CLRF   41
00C46:  CLRF   42
00C48:  CLRF   43
00C4A:  CLRF   44
00C4C:  CLRF   45
00C4E:  CLRF   46
00C50:  CLRF   47
00C52:  CLRF   48
00C54:  CLRF   49
00C56:  CLRF   4A
00C58:  CLRF   4B
00C5A:  CLRF   4C
00C5C:  CLRF   4D
00C5E:  CLRF   4E
00C60:  CLRF   4F
00C62:  CLRF   50
00C64:  CLRF   51
00C66:  CLRF   52
00C68:  CLRF   53
00C6A:  CLRF   54
00C6C:  CLRF   55
00C6E:  CLRF   56
00C70:  CLRF   57
00C72:  CLRF   58
00C74:  CLRF   59
00C76:  CLRF   5A
00C78:  CLRF   5B
00C7A:  CLRF   5C
00C7C:  CLRF   5D
00C7E:  CLRF   5E
00C80:  CLRF   5F
00C82:  MOVLB  0
00C84:  CLRF   x60
00C86:  CLRF   x61
00C88:  CLRF   x62
00C8A:  CLRF   x63
00C8C:  CLRF   x64
00C8E:  CLRF   x65
00C90:  CLRF   x66
00C92:  CLRF   x67
00C94:  CLRF   x68
00C96:  CLRF   x69
00C98:  CLRF   x6A
00C9A:  CLRF   x6B
00C9C:  CLRF   x6C
00C9E:  CLRF   x6D
00CA0:  CLRF   x6E
00CA2:  CLRF   x6F
00CA4:  CLRF   x70
00CA6:  CLRF   x71
00CA8:  CLRF   x72
00CAA:  CLRF   x73
00CAC:  CLRF   x74
00CAE:  CLRF   x75
00CB0:  CLRF   x76
00CB2:  CLRF   x77
00CB4:  CLRF   x78
00CB6:  CLRF   x79
00CB8:  CLRF   x7A
00CBA:  CLRF   x7B
00CBC:  CLRF   x7C
00CBE:  CLRF   x7D
00CC0:  CLRF   x7E
00CC2:  CLRF   x7F
00CC4:  CLRF   x80
00CC6:  CLRF   x81
00CC8:  CLRF   x82
00CCA:  CLRF   x83
00CCC:  CLRF   x84
00CCE:  CLRF   x85
00CD0:  CLRF   x86
00CD2:  CLRF   x87
00CD4:  CLRF   x88
00CD6:  CLRF   x89
00CD8:  CLRF   x8A
00CDA:  CLRF   x8B
00CDC:  CLRF   x8C
00CDE:  CLRF   x8D
00CE0:  CLRF   x8E
00CE2:  CLRF   x8F
00CE4:  CLRF   x90
00CE6:  CLRF   x91
00CE8:  CLRF   x92
00CEA:  CLRF   x93
00CEC:  CLRF   x94
00CEE:  CLRF   x95
00CF0:  CLRF   x96
00CF2:  CLRF   x97
00CF4:  CLRF   x98
00CF6:  CLRF   x99
00CF8:  CLRF   x9A
00CFA:  CLRF   x9B
00CFC:  CLRF   x9F
00CFE:  CLRF   xA0
00D00:  CLRF   xA1
00D02:  CLRF   xA2
00D04:  CLRF   xA3
00D06:  CLRF   xA4
00D08:  CLRF   xA5
00D0A:  CLRF   xA6
00D0C:  CLRF   xA7
00D0E:  CLRF   xA8
00D10:  CLRF   xA9
00D12:  CLRF   xAA
00D14:  CLRF   xAB
00D16:  CLRF   xAC
00D18:  CLRF   xAD
00D1A:  CLRF   xAE
....................     flagValidFrame = 0; 
00D1C:  BCF    1B.0
....................     Init_hard(); 
00D1E:  BRA    0ADC
....................     while(1) 
....................     { 
....................         // restart_wd(); 
....................         if(flagValidFrame && Delestage_enable) 
00D20:  BTFSS  1B.0
00D22:  BRA    0D2C
00D24:  BTFSS  1B.1
00D26:  BRA    0D2C
....................         { 
....................             Detection_delestage(); 
00D28:  BRA    0AFC
....................             flagValidFrame = false; 
00D2A:  BCF    1B.0
....................         } 
....................         Update_outputs(); 
00D2C:  RCALL  0998
....................         delay_ms(10); 
00D2E:  MOVLW  0A
00D30:  MOVWF  xDB
00D32:  RCALL  0904
....................     } 
00D34:  BRA    0D20
.................... } 
....................  
.................... void Init_hard() 
.................... { 
00D36:  SLEEP 
....................     output_high(LED1); 
*
00ADC:  BCF    F93.2
00ADE:  BSF    F8A.2
....................     output_low(LED2); 
00AE0:  BCF    F93.3
00AE2:  BCF    F8A.3
....................     // setup_wd(WDT_ON); 
....................     enable_interrupts(INT_RDA); 
00AE4:  BSF    F9D.5
....................     enable_interrupts(INT_SSP); 
00AE6:  BSF    F9D.3
....................     // enable_interrupts(INT_TIMER0); 
....................     // enable_interrupts(INT_AD); 
....................     enable_interrupts(PERIPH); 
00AE8:  BSF    FF2.6
....................     enable_interrupts(GLOBAL); 
00AEA:  MOVLW  C0
00AEC:  IORWF  FF2,F
....................      
....................     input(ZCD); 
00AEE:  BSF    F95.1
....................     PORT_D_PULLUPS(true); 
00AF0:  MOVLW  01
00AF2:  MOVWF  F7C
00AF4:  BSF    F86.7
....................      
....................     Init_outputs(); 
00AF6:  BRA    0A5A
.................... } 
00AF8:  GOTO   0D20 (RETURN)
....................  
.................... #INT_RDA 
.................... void serial_isr() 
.................... { 
....................     FrameTeleinfo[FrameIndex] = getc();  
*
004EE:  CLRF   03
004F0:  MOVF   x9C,W
004F2:  ADDLW  1C
004F4:  MOVWF  FE9
004F6:  MOVLW  00
004F8:  ADDWFC 03,W
004FA:  MOVWF  FEA
004FC:  BTFSS  F9E.5
004FE:  BRA    04FC
00500:  MOVFF  FAF,FEF
....................     putc(FrameTeleinfo[FrameIndex]); 
00504:  CLRF   03
00506:  MOVF   x9C,W
00508:  ADDLW  1C
0050A:  MOVWF  FE9
0050C:  MOVLW  00
0050E:  ADDWFC 03,W
00510:  MOVWF  FEA
00512:  MOVFF  FEF,E2
00516:  MOVFF  E2,E3
0051A:  BRA    04CA
....................  
....................     if(FrameTeleinfo[FrameIndex] == END_OF_LABEL) 
0051C:  CLRF   03
0051E:  MOVF   x9C,W
00520:  ADDLW  1C
00522:  MOVWF  FE9
00524:  MOVLW  00
00526:  ADDWFC 03,W
00528:  MOVWF  FEA
0052A:  MOVF   FEF,W
0052C:  SUBLW  0D
0052E:  BNZ   0558
....................     { 
....................         memcpy(FrameTeleinfoStored, FrameTeleinfo, FrameIndex+1); 
00530:  MOVLW  01
00532:  ADDWF  x9C,W
00534:  MOVWF  xE2
00536:  CLRF   FEA
00538:  MOVLW  5C
0053A:  MOVWF  FE9
0053C:  CLRF   FE2
0053E:  MOVLW  1C
00540:  MOVWF  FE1
00542:  MOVF   xE2,W
00544:  MOVWF  01
00546:  BZ    0550
00548:  MOVFF  FE6,FEE
0054C:  DECFSZ 01,F
0054E:  BRA    0548
....................         FrameIndexStored = FrameIndex; 
00550:  MOVFF  9C,9D
....................         FrameIndex = 0; 
00554:  CLRF   x9C
....................         flagValidFrame = true; 
00556:  BSF    1B.0
....................     } 
....................  
....................     FrameIndex = (FrameIndex == (SIZE_TELEINFO-1)) ? 0 : FrameIndex+1; 
00558:  MOVF   x9C,W
0055A:  SUBLW  3F
0055C:  BNZ   0562
0055E:  MOVLW  00
00560:  BRA    0566
00562:  MOVLW  01
00564:  ADDWF  x9C,W
00566:  MOVWF  x9C
.................... } 
....................  
00568:  BCF    F9E.5
0056A:  GOTO   0474
.................... #INT_SSP 
.................... void ssp_interupt() 
.................... { 
....................     BYTE incoming, state; 
....................  
....................     state = i2c_isr_state(); 
*
00584:  BTFSC  FC7.5
00586:  BRA    058E
00588:  CLRF   xAF
0058A:  BTFSC  FC7.2
0058C:  BSF    xAF.7
0058E:  MOVF   xAF,W
00590:  INCF   xAF,F
00592:  MOVWF  xE3
....................  
....................     if(state < 0x80)                     //Master is sending data 
00594:  MOVF   xE3,W
00596:  SUBLW  7F
00598:  BNC   05D0
....................     { 
....................         // state is the index of the I2C byte received 
....................         //First received byte is meant to be the index in the table 
....................         //then it is the data of the table 
....................         incoming = i2c_read(); 
0059A:  BCF    FC6.6
0059C:  BTFSS  F9E.3
0059E:  BRA    059C
005A0:  MOVF   FC9,W
005A2:  BSF    FC6.4
005A4:  MOVWF  xE2
....................         if(state == 1)                      
005A6:  DECFSZ xE3,W
005A8:  BRA    05B0
....................         { 
....................             I2C_table_index = incoming; 
005AA:  MOVFF  E2,9E
....................         } 
....................         else if(state > 1 && I2C_table_index < 16) 
005AE:  BRA    05D0
005B0:  MOVF   xE3,W
005B2:  SUBLW  01
005B4:  BC    05D0
005B6:  MOVF   x9E,W
005B8:  SUBLW  0F
005BA:  BNC   05D0
....................         { 
....................             Registers_table[I2C_table_index] = incoming; 
005BC:  CLRF   03
005BE:  MOVF   x9E,W
005C0:  ADDLW  9F
005C2:  MOVWF  FE9
005C4:  MOVLW  00
005C6:  ADDWFC 03,W
005C8:  MOVWF  FEA
005CA:  MOVFF  E2,FEF
....................             I2C_table_index++; 
005CE:  INCF   x9E,F
....................         } 
....................     } 
....................     if(state >= 0x80)                     //Master is requesting data 
005D0:  MOVF   xE3,W
005D2:  SUBLW  7F
005D4:  BC    05FC
....................     { 
....................         if(I2C_table_index < 16) 
005D6:  MOVF   x9E,W
005D8:  SUBLW  0F
005DA:  BNC   05F8
....................         { 
....................             i2c_write(Registers_table[I2C_table_index]); 
005DC:  CLRF   03
005DE:  MOVF   x9E,W
005E0:  ADDLW  9F
005E2:  MOVWF  FE9
005E4:  MOVLW  00
005E6:  ADDWFC 03,W
005E8:  MOVWF  FEA
005EA:  MOVFF  FEF,E4
005EE:  MOVFF  E4,E5
005F2:  RCALL  056E
....................             I2C_table_index++; 
005F4:  INCF   x9E,F
....................         } 
....................         else 
005F6:  BRA    05FC
....................             i2c_write(0xFF); 
005F8:  SETF   xE5
005FA:  RCALL  056E
....................     } 
.................... } 
....................  
005FC:  BCF    F9E.3
005FE:  GOTO   0474
.................... #include <18f47j53.h> 
.................... //////// Standard Header file for the PIC18F47J53 device //////////////// 
.................... #device PIC18F47J53 
.................... #list 
....................  
.................... #include "outputs.h" 
.................... #ifndef OUTPUTS_H 
.................... #define	OUTPUTS_H 
....................  
.................... #ifndef bool 
.................... #define bool int1 
.................... #endif 
....................  
.................... enum t_Order{ 
....................     ARRET = 0, HORS_GEL = 1, ECO = 2, CONFORT = 3  
.................... }; 
....................  
.................... typedef struct { 
....................     t_Order CurrentOrder; 
....................     unsigned long Positive; 
....................     unsigned long Negative; 
.................... }t_Radiator; 
....................  
.................... void Init_outputs(); 
.................... void Radiator(t_Order Order, int8 id); 
.................... void Detection_delestage(); 
.................... void Update_outputs(); 
.................... void Update_Relais(bool bRelai_1, bool bRelai_2); 
....................  
.................... #endif	/* OUTPUTS_H */ 
....................  
....................  
.................... #include "main.h" 
.................... #ifndef MAIN_H 
.................... #define MAIN_H 
.................... // Here shall lie only the declaration of functions and defines 
.................... #ifndef bool 
.................... #define bool int1 
.................... #define false 0 
.................... #define true 1 
.................... #endif 
....................  
.................... #define SIZE_TELEINFO   64 
.................... #define END_OF_LABEL    0x0D 
....................  
.................... #use delay(clock=48M) 
.................... /* RS232 configuration */ 
.................... #use rs232(baud=1200,bits=7,xmit=PIN_C6,rcv=PIN_C7, PARITY=E, STOP=1) 
.................... #use i2c(SLAVE, SCL=PIN_B4, SDA=PIN_B5, address=0xA0) 
.................... #fuses WDT512, INTRC_PLL_IO, PLL2, PLLEN, NOCPUDIV 
....................  
.................... #build (reset=0x400, interrupt=0x408) 
.................... #org 0, 0x3FF {} 
....................  
.................... void Init_hard(); 
....................  
.................... #endif 
....................  
.................... #include "hardware.h" 
.................... #ifndef HARDWARE_H 
.................... #define	HARDWARE_H 
....................  
.................... #define LED1 	PIN_B2 
.................... #define LED2 	PIN_B3 
....................  
.................... #define FP1A    PIN_C2 
.................... #define FP1B    PIN_D0 
.................... #define FP2A    PIN_C1 
.................... #define FP2B    PIN_C0 
.................... #define FP3A    PIN_A6 
.................... #define FP3B    PIN_A7 
.................... #define FP4A    PIN_E2 
.................... #define FP4B    PIN_E1 
.................... #define FP5A    PIN_E0 
.................... #define FP5B    PIN_A5 
.................... #define FP6A    PIN_A2 
.................... #define FP6B    PIN_A1 
....................  
.................... #define RELAIS1_ON  PIN_D6 
.................... #define RELAIS1_OFF PIN_D7 
.................... #define RELAIS2_ON  PIN_D4 
.................... #define RELAIS2_OFF PIN_D5 
....................  
.................... #define DELAIS_RELAIS_MS 30 
....................  
.................... #define ONE_WIRE        PIN_A0 
.................... #define ZCD             PIN_D1 
.................... #define CONTACT_IO      PIN_D3 
.................... #define SERIAL_FROM_RPI PIN_D2 
....................  
.................... #define ADC_RELAIS_1     
.................... #define ADC_RELAIS_2     
....................  
.................... #endif	/* HARDWARE_H */ 
....................  
....................  
....................  
.................... extern char FrameTeleinfoStored[SIZE_TELEINFO]; 
.................... extern char FrameIndexStored; 
.................... extern BYTE Registers_table[16]; 
....................  
.................... bool Delestage_enable = true; 
.................... unsigned long lADC_1 = 0, lADC_2 = 0; 
.................... t_Radiator Rads[6]; 
....................  
.................... void Init_outputs() 
.................... { 
....................     Rads[0].Positive = FP1A; 
*
00A5A:  MOVLW  7C
00A5C:  MOVWF  xB6
00A5E:  MOVLW  12
00A60:  MOVWF  xB5
....................     Rads[0].Negative = FP1B; 
00A62:  MOVLW  7C
00A64:  MOVWF  xB8
00A66:  MOVLW  18
00A68:  MOVWF  xB7
....................     Rads[1].Positive = FP2A; 
00A6A:  MOVLW  7C
00A6C:  MOVWF  xBB
00A6E:  MOVLW  11
00A70:  MOVWF  xBA
....................     Rads[1].Negative = FP2B; 
00A72:  MOVLW  7C
00A74:  MOVWF  xBD
00A76:  MOVLW  10
00A78:  MOVWF  xBC
....................     Rads[2].Positive = FP3A; 
00A7A:  MOVLW  7C
00A7C:  MOVWF  xC0
00A7E:  MOVLW  06
00A80:  MOVWF  xBF
....................     Rads[2].Negative = FP3B; 
00A82:  MOVLW  7C
00A84:  MOVWF  xC2
00A86:  MOVLW  07
00A88:  MOVWF  xC1
....................     Rads[3].Positive = FP4A; 
00A8A:  MOVLW  7C
00A8C:  MOVWF  xC5
00A8E:  MOVLW  22
00A90:  MOVWF  xC4
....................     Rads[3].Negative = FP4B; 
00A92:  MOVLW  7C
00A94:  MOVWF  xC7
00A96:  MOVLW  21
00A98:  MOVWF  xC6
....................     Rads[4].Positive = FP5A; 
00A9A:  MOVLW  7C
00A9C:  MOVWF  xCA
00A9E:  MOVLW  20
00AA0:  MOVWF  xC9
....................     Rads[4].Negative = FP5B; 
00AA2:  MOVLW  7C
00AA4:  MOVWF  xCC
00AA6:  MOVLW  05
00AA8:  MOVWF  xCB
....................     Rads[5].Positive = FP6A; 
00AAA:  MOVLW  7C
00AAC:  MOVWF  xCF
00AAE:  MOVLW  02
00AB0:  MOVWF  xCE
....................     Rads[5].Negative = FP6B; 
00AB2:  MOVLW  7C
00AB4:  MOVWF  xD1
00AB6:  MOVLW  01
00AB8:  MOVWF  xD0
....................  
....................     int i; 
....................     for(i = 0; i < 16; i++) 
00ABA:  CLRF   xD2
00ABC:  MOVF   xD2,W
00ABE:  SUBLW  0F
00AC0:  BNC   0AD6
....................         Registers_table[i] = 0; 
00AC2:  CLRF   03
00AC4:  MOVF   xD2,W
00AC6:  ADDLW  9F
00AC8:  MOVWF  FE9
00ACA:  MOVLW  00
00ACC:  ADDWFC 03,W
00ACE:  MOVWF  FEA
00AD0:  CLRF   FEF
00AD2:  INCF   xD2,F
00AD4:  BRA    0ABC
....................  
....................     Update_outputs(); 
00AD6:  RCALL  0998
.................... } 
00AD8:  GOTO   0AF8 (RETURN)
....................  
.................... void Radiator(t_Order Order, int8 id) 
.................... { 
....................     if(Rads[id].CurrentOrder != Order) 
*
00640:  MOVF   xD9,W
00642:  MULLW  05
00644:  MOVF   FF3,W
00646:  CLRF   xDB
00648:  MOVWF  xDA
0064A:  MOVLW  B4
0064C:  ADDWF  xDA,W
0064E:  MOVWF  FE9
00650:  MOVLW  00
00652:  ADDWFC xDB,W
00654:  MOVWF  FEA
00656:  MOVF   xD8,W
00658:  SUBWF  FEF,W
0065A:  BTFSC  FD8.2
0065C:  BRA    0900
....................     { 
....................         switch(Order) 
....................         { 
0065E:  MOVF   xD8,W
00660:  BZ    0674
00662:  XORLW  01
00664:  BZ    0710
00666:  XORLW  03
00668:  BTFSC  FD8.2
0066A:  BRA    07AC
0066C:  XORLW  01
0066E:  BTFSC  FD8.2
00670:  BRA    084A
00672:  BRA    08E4
....................             case ARRET: 
....................                 output_high(Rads[id].Positive); 
00674:  MOVF   xD9,W
00676:  MULLW  05
00678:  MOVF   FF3,W
0067A:  CLRF   xDB
0067C:  MOVWF  xDA
0067E:  MOVLW  01
00680:  ADDWF  xDA,W
00682:  MOVWF  01
00684:  MOVLW  00
00686:  ADDWFC xDB,W
00688:  MOVWF  03
0068A:  MOVF   01,W
0068C:  ADDLW  B4
0068E:  MOVWF  FE9
00690:  MOVLW  00
00692:  ADDWFC 03,W
00694:  MOVWF  FEA
00696:  MOVFF  FEC,DB
0069A:  MOVF   FED,F
0069C:  MOVFF  FEF,DA
006A0:  MOVFF  DA,DC
006A4:  MOVLW  01
006A6:  MOVWF  xDD
006A8:  MOVLW  0F
006AA:  MOVWF  xDF
006AC:  MOVLW  89
006AE:  MOVWF  xDE
006B0:  RCALL  0602
006B2:  MOVFF  DA,DC
006B6:  CLRF   xDD
006B8:  MOVLW  0F
006BA:  MOVWF  xDF
006BC:  MOVLW  92
006BE:  MOVWF  xDE
006C0:  RCALL  0602
....................                 output_low(Rads[id].Negative); 
006C2:  MOVF   xD9,W
006C4:  MULLW  05
006C6:  MOVF   FF3,W
006C8:  CLRF   xDB
006CA:  MOVWF  xDA
006CC:  MOVLW  03
006CE:  ADDWF  xDA,W
006D0:  MOVWF  01
006D2:  MOVLW  00
006D4:  ADDWFC xDB,W
006D6:  MOVWF  03
006D8:  MOVF   01,W
006DA:  ADDLW  B4
006DC:  MOVWF  FE9
006DE:  MOVLW  00
006E0:  ADDWFC 03,W
006E2:  MOVWF  FEA
006E4:  MOVFF  FEC,DB
006E8:  MOVF   FED,F
006EA:  MOVFF  FEF,DA
006EE:  MOVFF  DA,DC
006F2:  CLRF   xDD
006F4:  MOVLW  0F
006F6:  MOVWF  xDF
006F8:  MOVLW  89
006FA:  MOVWF  xDE
006FC:  RCALL  0602
006FE:  MOVFF  DA,DC
00702:  CLRF   xDD
00704:  MOVLW  0F
00706:  MOVWF  xDF
00708:  MOVLW  92
0070A:  MOVWF  xDE
0070C:  RCALL  0602
....................             break; 
0070E:  BRA    08E6
....................             case HORS_GEL: 
....................                 output_low(Rads[id].Positive); 
00710:  MOVF   xD9,W
00712:  MULLW  05
00714:  MOVF   FF3,W
00716:  CLRF   xDB
00718:  MOVWF  xDA
0071A:  MOVLW  01
0071C:  ADDWF  xDA,W
0071E:  MOVWF  01
00720:  MOVLW  00
00722:  ADDWFC xDB,W
00724:  MOVWF  03
00726:  MOVF   01,W
00728:  ADDLW  B4
0072A:  MOVWF  FE9
0072C:  MOVLW  00
0072E:  ADDWFC 03,W
00730:  MOVWF  FEA
00732:  MOVFF  FEC,DB
00736:  MOVF   FED,F
00738:  MOVFF  FEF,DA
0073C:  MOVFF  DA,DC
00740:  CLRF   xDD
00742:  MOVLW  0F
00744:  MOVWF  xDF
00746:  MOVLW  89
00748:  MOVWF  xDE
0074A:  RCALL  0602
0074C:  MOVFF  DA,DC
00750:  CLRF   xDD
00752:  MOVLW  0F
00754:  MOVWF  xDF
00756:  MOVLW  92
00758:  MOVWF  xDE
0075A:  RCALL  0602
....................                 output_high(Rads[id].Negative);  
0075C:  MOVF   xD9,W
0075E:  MULLW  05
00760:  MOVF   FF3,W
00762:  CLRF   xDB
00764:  MOVWF  xDA
00766:  MOVLW  03
00768:  ADDWF  xDA,W
0076A:  MOVWF  01
0076C:  MOVLW  00
0076E:  ADDWFC xDB,W
00770:  MOVWF  03
00772:  MOVF   01,W
00774:  ADDLW  B4
00776:  MOVWF  FE9
00778:  MOVLW  00
0077A:  ADDWFC 03,W
0077C:  MOVWF  FEA
0077E:  MOVFF  FEC,DB
00782:  MOVF   FED,F
00784:  MOVFF  FEF,DA
00788:  MOVFF  DA,DC
0078C:  MOVLW  01
0078E:  MOVWF  xDD
00790:  MOVLW  0F
00792:  MOVWF  xDF
00794:  MOVLW  89
00796:  MOVWF  xDE
00798:  RCALL  0602
0079A:  MOVFF  DA,DC
0079E:  CLRF   xDD
007A0:  MOVLW  0F
007A2:  MOVWF  xDF
007A4:  MOVLW  92
007A6:  MOVWF  xDE
007A8:  RCALL  0602
....................             break; 
007AA:  BRA    08E6
....................             case ECO: 
....................                 output_high(Rads[id].Positive); 
007AC:  MOVF   xD9,W
007AE:  MULLW  05
007B0:  MOVF   FF3,W
007B2:  CLRF   xDB
007B4:  MOVWF  xDA
007B6:  MOVLW  01
007B8:  ADDWF  xDA,W
007BA:  MOVWF  01
007BC:  MOVLW  00
007BE:  ADDWFC xDB,W
007C0:  MOVWF  03
007C2:  MOVF   01,W
007C4:  ADDLW  B4
007C6:  MOVWF  FE9
007C8:  MOVLW  00
007CA:  ADDWFC 03,W
007CC:  MOVWF  FEA
007CE:  MOVFF  FEC,DB
007D2:  MOVF   FED,F
007D4:  MOVFF  FEF,DA
007D8:  MOVFF  DA,DC
007DC:  MOVLW  01
007DE:  MOVWF  xDD
007E0:  MOVLW  0F
007E2:  MOVWF  xDF
007E4:  MOVLW  89
007E6:  MOVWF  xDE
007E8:  RCALL  0602
007EA:  MOVFF  DA,DC
007EE:  CLRF   xDD
007F0:  MOVLW  0F
007F2:  MOVWF  xDF
007F4:  MOVLW  92
007F6:  MOVWF  xDE
007F8:  RCALL  0602
....................                 output_high(Rads[id].Negative);             
007FA:  MOVF   xD9,W
007FC:  MULLW  05
007FE:  MOVF   FF3,W
00800:  CLRF   xDB
00802:  MOVWF  xDA
00804:  MOVLW  03
00806:  ADDWF  xDA,W
00808:  MOVWF  01
0080A:  MOVLW  00
0080C:  ADDWFC xDB,W
0080E:  MOVWF  03
00810:  MOVF   01,W
00812:  ADDLW  B4
00814:  MOVWF  FE9
00816:  MOVLW  00
00818:  ADDWFC 03,W
0081A:  MOVWF  FEA
0081C:  MOVFF  FEC,DB
00820:  MOVF   FED,F
00822:  MOVFF  FEF,DA
00826:  MOVFF  DA,DC
0082A:  MOVLW  01
0082C:  MOVWF  xDD
0082E:  MOVLW  0F
00830:  MOVWF  xDF
00832:  MOVLW  89
00834:  MOVWF  xDE
00836:  RCALL  0602
00838:  MOVFF  DA,DC
0083C:  CLRF   xDD
0083E:  MOVLW  0F
00840:  MOVWF  xDF
00842:  MOVLW  92
00844:  MOVWF  xDE
00846:  RCALL  0602
....................             break; 
00848:  BRA    08E6
....................             case CONFORT: 
....................                 output_low(Rads[id].Positive); 
0084A:  MOVF   xD9,W
0084C:  MULLW  05
0084E:  MOVF   FF3,W
00850:  CLRF   xDB
00852:  MOVWF  xDA
00854:  MOVLW  01
00856:  ADDWF  xDA,W
00858:  MOVWF  01
0085A:  MOVLW  00
0085C:  ADDWFC xDB,W
0085E:  MOVWF  03
00860:  MOVF   01,W
00862:  ADDLW  B4
00864:  MOVWF  FE9
00866:  MOVLW  00
00868:  ADDWFC 03,W
0086A:  MOVWF  FEA
0086C:  MOVFF  FEC,DB
00870:  MOVF   FED,F
00872:  MOVFF  FEF,DA
00876:  MOVFF  DA,DC
0087A:  CLRF   xDD
0087C:  MOVLW  0F
0087E:  MOVWF  xDF
00880:  MOVLW  89
00882:  MOVWF  xDE
00884:  RCALL  0602
00886:  MOVFF  DA,DC
0088A:  CLRF   xDD
0088C:  MOVLW  0F
0088E:  MOVWF  xDF
00890:  MOVLW  92
00892:  MOVWF  xDE
00894:  RCALL  0602
....................                 output_low(Rads[id].Negative);             
00896:  MOVF   xD9,W
00898:  MULLW  05
0089A:  MOVF   FF3,W
0089C:  CLRF   xDB
0089E:  MOVWF  xDA
008A0:  MOVLW  03
008A2:  ADDWF  xDA,W
008A4:  MOVWF  01
008A6:  MOVLW  00
008A8:  ADDWFC xDB,W
008AA:  MOVWF  03
008AC:  MOVF   01,W
008AE:  ADDLW  B4
008B0:  MOVWF  FE9
008B2:  MOVLW  00
008B4:  ADDWFC 03,W
008B6:  MOVWF  FEA
008B8:  MOVFF  FEC,DB
008BC:  MOVF   FED,F
008BE:  MOVFF  FEF,DA
008C2:  MOVFF  DA,DC
008C6:  CLRF   xDD
008C8:  MOVLW  0F
008CA:  MOVWF  xDF
008CC:  MOVLW  89
008CE:  MOVWF  xDE
008D0:  RCALL  0602
008D2:  MOVFF  DA,DC
008D6:  CLRF   xDD
008D8:  MOVLW  0F
008DA:  MOVWF  xDF
008DC:  MOVLW  92
008DE:  MOVWF  xDE
008E0:  RCALL  0602
....................             break; 
008E2:  BRA    08E6
....................             default: 
....................                 break; 
008E4:  BRA    08E6
....................         } 
....................     Rads[id].CurrentOrder = Order;         
008E6:  MOVF   xD9,W
008E8:  MULLW  05
008EA:  MOVF   FF3,W
008EC:  CLRF   xDB
008EE:  MOVWF  xDA
008F0:  MOVLW  B4
008F2:  ADDWF  xDA,W
008F4:  MOVWF  FE9
008F6:  MOVLW  00
008F8:  ADDWFC xDB,W
008FA:  MOVWF  FEA
008FC:  MOVFF  D8,FEF
....................     } 
.................... } 
00900:  GOTO   09C2 (RETURN)
....................  
.................... void Detection_delestage() 
.................... { 
....................     // First check the Frame (size, crc...) 
....................     if(FrameTeleinfoStored[0] == 0x0A && FrameIndexStored > 2) 
*
00AFC:  MOVF   5C,W
00AFE:  SUBLW  0A
00B00:  BNZ   0B86
00B02:  MOVF   x9D,W
00B04:  SUBLW  02
00B06:  BC    0B86
....................     { 
....................         int8 i; 
....................         int16 checksum = 0; 
00B08:  CLRF   xD4
00B0A:  CLRF   xD3
....................         // last is CR, -1 is CRC 
....................         for(i=1; i < (FrameIndexStored-1); i++) 
00B0C:  MOVLW  01
00B0E:  MOVWF  xD2
00B10:  MOVLW  01
00B12:  SUBWF  x9D,W
00B14:  SUBWF  xD2,W
00B16:  BC    0B32
....................         { 
....................             checksum += FrameTeleinfoStored[i]; 
00B18:  CLRF   03
00B1A:  MOVF   xD2,W
00B1C:  ADDLW  5C
00B1E:  MOVWF  FE9
00B20:  MOVLW  00
00B22:  ADDWFC 03,W
00B24:  MOVWF  FEA
00B26:  MOVF   FEF,W
00B28:  ADDWF  xD3,F
00B2A:  MOVLW  00
00B2C:  ADDWFC xD4,F
....................         } 
00B2E:  INCF   xD2,F
00B30:  BRA    0B10
....................         checksum &= 0x3F; 
00B32:  MOVLW  3F
00B34:  ANDWF  xD3,F
00B36:  CLRF   xD4
....................         checksum += 0x20; 
00B38:  MOVLW  20
00B3A:  ADDWF  xD3,F
00B3C:  MOVLW  00
00B3E:  ADDWFC xD4,F
....................         if(FrameTeleinfoStored[FrameIndexStored-1] == checksum) // valid frame 
00B40:  MOVLW  01
00B42:  SUBWF  x9D,W
00B44:  CLRF   03
00B46:  ADDLW  5C
00B48:  MOVWF  FE9
00B4A:  MOVLW  00
00B4C:  ADDWFC 03,W
00B4E:  MOVWF  FEA
00B50:  MOVF   xD3,W
00B52:  SUBWF  FEF,W
00B54:  BNZ   0B86
00B56:  MOVF   xD4,F
00B58:  BNZ   0B86
....................         { 
....................             if(FrameTeleinfoStored[1] == 'A' && 
....................                FrameTeleinfoStored[2] == 'D' && 
....................                FrameTeleinfoStored[3] == 'P' && 
....................                FrameTeleinfoStored[4] == 'S' && 
....................                FrameTeleinfoStored[5] == 0x20) 
00B5A:  MOVF   5D,W
00B5C:  SUBLW  41
00B5E:  BNZ   0B86
00B60:  MOVF   5E,W
00B62:  SUBLW  44
00B64:  BNZ   0B86
00B66:  MOVF   5F,W
00B68:  SUBLW  50
00B6A:  BNZ   0B86
00B6C:  MOVF   x60,W
00B6E:  SUBLW  53
00B70:  BNZ   0B86
00B72:  MOVF   x61,W
00B74:  SUBLW  20
00B76:  BNZ   0B86
....................             { 
....................                 Registers_table[0] = 0; 
00B78:  CLRF   x9F
....................                 Registers_table[1] = 0; 
00B7A:  CLRF   xA0
....................                 Registers_table[2] = 0; 
00B7C:  CLRF   xA1
....................                 Registers_table[3] = 0; 
00B7E:  CLRF   xA2
....................                 Registers_table[4] = 0; 
00B80:  CLRF   xA3
....................                 Registers_table[5] = 0; 
00B82:  CLRF   xA4
....................                 Update_outputs(); 
00B84:  RCALL  0998
....................             } 
....................         } 
....................     } 
.................... } 
00B86:  GOTO   0D2A (RETURN)
....................  
.................... /*Table de registres : 
....................  
.................... @0 = FP0 (1/2/3/4) 
.................... ........ 
.................... @5 = FP5 
.................... @6 = relai 1 (bit 0) 
.................... @7 = relai 2 (bit 0) 
....................  
.................... @8 = bit7 = delestage enable 
....................      bit1:0 = ordre de delestage = 00 tout en meme temps 
....................                                    01 FP puis relais 
....................                                    10 Relais puis FP 
.................... @9/10 = ADC1 Read only 
.................... @11/12 = ADC2 Read only 
.................... @13 toggle led 
.................... */ 
.................... // Update_output() : Update the output according to Registers_Table 
.................... void Update_outputs() 
.................... { 
*
00998:  BCF    xD5.0
0099A:  BCF    xD5.1
0099C:  CLRF   xD6
....................     bool bRelai_1 = false, bRelai_2 = false; 
....................     int8 i = 0; 
....................      
....................     for(i = 0; i < 6; i++) 
0099E:  CLRF   xD6
009A0:  MOVF   xD6,W
009A2:  SUBLW  05
009A4:  BNC   09C6
....................     { 
....................         Radiator(Registers_table[i], i); 
009A6:  CLRF   03
009A8:  MOVF   xD6,W
009AA:  ADDLW  9F
009AC:  MOVWF  FE9
009AE:  MOVLW  00
009B0:  ADDWFC 03,W
009B2:  MOVWF  FEA
009B4:  MOVFF  FEF,D7
009B8:  MOVFF  D7,D8
009BC:  MOVFF  D6,D9
009C0:  BRA    0640
....................     } 
009C2:  INCF   xD6,F
009C4:  BRA    09A0
....................     bRelai_1 = Registers_table[6] & 0x01 ? true : false; 
009C6:  BTFSS  xA5.0
009C8:  BRA    09CE
009CA:  MOVLW  01
009CC:  BRA    09D0
009CE:  MOVLW  00
009D0:  BCF    xD5.0
009D2:  BTFSC  FE8.0
009D4:  BSF    xD5.0
....................     bRelai_2 = Registers_table[7] & 0x01 ? true : false; 
009D6:  BTFSS  xA6.0
009D8:  BRA    09DE
009DA:  MOVLW  01
009DC:  BRA    09E0
009DE:  MOVLW  00
009E0:  BCF    xD5.1
009E2:  BTFSC  FE8.0
009E4:  BSF    xD5.1
....................     Update_Relais(bRelai_1, bRelai_2); 
009E6:  MOVLW  00
009E8:  BTFSC  xD5.0
009EA:  MOVLW  01
009EC:  MOVWF  xD7
009EE:  MOVLW  00
009F0:  BTFSC  xD5.1
009F2:  MOVLW  01
009F4:  MOVFF  D7,D9
009F8:  MOVWF  xDA
009FA:  BRA    092C
....................  
....................     Delestage_enable = Registers_table[8] & 0x80 ? true : false; 
009FC:  BTFSS  xA7.7
009FE:  BRA    0A04
00A00:  MOVLW  01
00A02:  BRA    0A06
00A04:  MOVLW  00
00A06:  BCF    1B.1
00A08:  BTFSC  FE8.0
00A0A:  BSF    1B.1
....................     // ordre de delestage = Registers_table[8] & 0x03; 
....................  
....................     Registers_table[9] = lADC_1 >> 8; 
00A0C:  MOVFF  B1,A8
....................     Registers_table[10] = lADC_1 & 0xFF; 
00A10:  MOVFF  B0,A9
....................     Registers_table[11] = lADC_2 >> 8; 
00A14:  MOVFF  B3,AA
....................     Registers_table[12] = lADC_2 & 0xFF; 
00A18:  MOVFF  B2,AB
....................  
....................     if((Registers_table[13]&0x0F) == 0) 
00A1C:  MOVF   xAC,W
00A1E:  ANDLW  0F
00A20:  BNZ   0A28
....................         output_low(LED1); 
00A22:  BCF    F93.2
00A24:  BCF    F8A.2
....................     else if((Registers_table[13]&0x0F) == 0x01) 
00A26:  BRA    0A3A
00A28:  MOVF   xAC,W
00A2A:  ANDLW  0F
00A2C:  SUBLW  01
00A2E:  BNZ   0A36
....................         output_high(LED1); 
00A30:  BCF    F93.2
00A32:  BSF    F8A.2
....................     else 
00A34:  BRA    0A3A
....................         output_toggle(LED1); 
00A36:  BCF    F93.2
00A38:  BTG    F8A.2
....................  
....................     if((Registers_table[13]&0xF0) == 0) 
00A3A:  MOVF   xAC,W
00A3C:  ANDLW  F0
00A3E:  BNZ   0A46
....................         output_low(LED2); 
00A40:  BCF    F93.3
00A42:  BCF    F8A.3
....................     else if((Registers_table[13]&0xF0) == 0x10) 
00A44:  BRA    0A58
00A46:  MOVF   xAC,W
00A48:  ANDLW  F0
00A4A:  SUBLW  10
00A4C:  BNZ   0A54
....................         output_high(LED2); 
00A4E:  BCF    F93.3
00A50:  BSF    F8A.3
....................     else 
00A52:  BRA    0A58
....................         output_toggle(LED2); 
00A54:  BCF    F93.3
00A56:  BTG    F8A.3
.................... } 
00A58:  RETURN 0
....................  
.................... // Update the relais state : because they are bistable, we need to check if the desired state changed before changing the output 
.................... void Update_Relais(bool bRelai_1, bool bRelai_2) 
.................... { 
....................     static bool bLastRelai_1 = true, bLastRelai_2 = true; // true allow to disable the relais at startup :) 
....................  
....................     if(bLastRelai_1 != bRelai_1) 
*
0092C:  MOVLW  00
0092E:  BTFSC  1B.2
00930:  MOVLW  01
00932:  SUBWF  xD9,W
00934:  BZ    095A
....................     { 
....................         if(bRelai_1) 
00936:  MOVF   xD9,F
00938:  BZ    0944
....................         { 
....................             output_high(RELAIS1_ON); 
0093A:  BCF    F95.6
0093C:  BSF    F8C.6
....................             output_low(RELAIS1_OFF); 
0093E:  BCF    F95.7
00940:  BCF    F8C.7
....................         } 
....................         else 
00942:  BRA    094C
....................         { 
....................             output_low(RELAIS1_ON); 
00944:  BCF    F95.6
00946:  BCF    F8C.6
....................             output_high(RELAIS1_OFF); 
00948:  BCF    F95.7
0094A:  BSF    F8C.7
....................         } 
....................         delay_ms(DELAIS_RELAIS_MS); 
0094C:  MOVLW  1E
0094E:  MOVWF  xDB
00950:  RCALL  0904
....................         output_low(RELAIS1_ON); 
00952:  BCF    F95.6
00954:  BCF    F8C.6
....................         output_low(RELAIS1_OFF); 
00956:  BCF    F95.7
00958:  BCF    F8C.7
....................     } 
....................     if(bLastRelai_2 != bRelai_2) 
0095A:  MOVLW  00
0095C:  BTFSC  1B.3
0095E:  MOVLW  01
00960:  SUBWF  xDA,W
00962:  BZ    0988
....................     { 
....................         if(bRelai_2) 
00964:  MOVF   xDA,F
00966:  BZ    0972
....................         { 
....................             output_high(RELAIS2_ON); 
00968:  BCF    F95.4
0096A:  BSF    F8C.4
....................             output_low(RELAIS2_OFF); 
0096C:  BCF    F95.5
0096E:  BCF    F8C.5
....................         } 
....................         else 
00970:  BRA    097A
....................         { 
....................             output_low(RELAIS2_ON); 
00972:  BCF    F95.4
00974:  BCF    F8C.4
....................             output_high(RELAIS2_OFF); 
00976:  BCF    F95.5
00978:  BSF    F8C.5
....................         } 
....................         delay_ms(DELAIS_RELAIS_MS);     
0097A:  MOVLW  1E
0097C:  MOVWF  xDB
0097E:  RCALL  0904
....................         output_low(RELAIS2_ON); 
00980:  BCF    F95.4
00982:  BCF    F8C.4
....................         output_low(RELAIS2_OFF);     
00984:  BCF    F95.5
00986:  BCF    F8C.5
....................     } 
....................  
....................     bLastRelai_1 = bRelai_1; 
00988:  BCF    1B.2
0098A:  BTFSC  xD9.0
0098C:  BSF    1B.2
....................     bLastRelai_2 = bRelai_2; 
0098E:  BCF    1B.3
00990:  BTFSC  xDA.0
00992:  BSF    1B.3
.................... } 
00994:  GOTO   09FC (RETURN)

Configuration Fuses:
   Word  1: F7AC   NOWDT PLL2 PLLEN STVREN NOXINST NODEBUG NOCPUDIV NOPROTECT
   Word  2: F9FA   INTRC_PLL_IO SOSC_HIGH CLOCKOUT FCMEN IESO WDT512
   Word  3: FBFF   DSWDTOSC_INT RTCOSC_T1 DSBOR DSWDT DSWDT2147483648 IOL1WAY ADC10 MSSPMSK7
   Word  4: FBFF   WPFP NOWPCFG WPDIS WPBEG LS48MHZ
